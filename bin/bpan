#!/usr/bin/env bash

VERSION=0.1.98

die() { printf '%s\n' "$@" >&2; exit 1; }

( shopt -s compat31 2>/dev/null ) ||
  die "Error: Requires Bash version 3.2 or higher."

[[ ${BPAN_DEBUG-} == -x ]] && BPAN_DEBUG_BASH_X='-x'
set "${BPAN_DEBUG_BASH_X:-+x}"

[[ ${BPAN_ROOT:-} ]] ||
  die "Error: BPAN_ROOT not set." \
      "Try: 'source /path/to/bpan/.rc'."

source "$BPAN_ROOT/lib/bpan.bash" --app ||
  die "Error: Can't source 'bpan.bash'"
bpan:source bashplus +cmd +err +fs +git +list +say +str +sym +sys +time
bpan:source ini
bpan:source bpan-util
bpan:source getopt "\
getopt_default=--help
getopt_cmds_find=true
getopt_cmds_spec=getopt-cmds-spec

$app [<opt...>] <cmd> [<cmd-opt...>] [<cmd-arg...>]
$app <cmd> --help

$APP System Commands:
  find          Search for $APP packages
  install       Install a $APP package
  config        Manage $APP config settings
  cmds          List available '$app' commands
  help          Get help for a '$app' command

Project Package Commands:
  init          Add $APP components to a project
  add           Add $APP elements to a project
  update        Update project $APP assets
  test          Run the project tests
  publish       Publish the project to $APP index

Options:
--
v,verbose     Print more output
q,quiet       Print less output

h,help        Show the command summary
V,version     Display $app version
x,debug       Print lots of debugging info
#
# Hidden options for internal use:
#
setup*        Do .rc system setup
complete*     Shell tab completion for $app
#
# Commands for later:
#
#   info          Get info about a $APP package
#   clean         Remove the build files and dirs
"

main() (
  [[ ${BPAN_DEBUG_TIMER-} ]] && set-timers

  set-env

  getopt "$@"

  $option_debug && export BPAN_DEBUG_BASH=true

  [[ ${args[0]-} == + ]] && cmd=misc

  if [[ $option_version == true ]]; then
    echo "$app $VERSION"

  elif $option_setup; then
    source-once setup
    setup:main "${args[@]}"

  elif $option_complete; then
    source-once complete
    complete:main "${args[@]}"

  elif [[ $cmd ]]; then
    source-once "$cmd"
    "$cmd:main" "${args[@]}"

  else
    error "Invalid $app command '$app $*'"
  fi
)

# Determine the bpan config files and the BPAN_INSTALL directory.
set-env() {
  do-ini-init

  BPAN_INSTALL=${BPAN_INSTALL:-$(ini:get install.prefix)}
  export BPAN_INSTALL
  if [[ ! -d $BPAN_INSTALL ]]; then
    if [[ $BPAN_INSTALL == $root/local ]]; then
      mkdir -p "$BPAN_INSTALL"
    else
      error "BPAN_INSTALL='$BPAN_INSTALL' - directory not found"
    fi
  fi
  install_dir=$BPAN_INSTALL

  if [[ ${BPAN_DEBUG_BASH_X-} ]]; then
    BASHPLUS_DEBUG_BASH_X=${BASHPLUS_DEBUG_BASH_X:-$BPAN_DEBUG_BASH_X}
    INI_DEBUG_BASH_X=${INI_DEBUG_BASH_X:-$BPAN_DEBUG_BASH_X}
  fi
}

do-ini-init() {
  root=$BPAN_ROOT
  [[ -f $root/bin/$app ]] ||
    error "BPAN_ROOT variable has bad value '$root'"

  bpan_run_timestamp=$(+time:stamp)

  local files=()

  config_file_system=${BPAN_CONFIG_SYSTEM:-$root/etc/config}
  [[ -f $config_file_system ]] ||
    error "$APP system config file '$config_file_system' file does not exist"
  files+=("$config_file_system")

  config_file_global=${BPAN_CONFIG_GLOBAL:-$root/config}
  if [[ -f $config_file_global ]]; then
    files+=("$config_file_global")
  fi

  config_file_local=.$app/config
  if +git:in-repo .; then
    local top_dir
    top_dir=$(+git:top-dir)
    if [[ -f $top_dir/$config_file_local ]]; then
      files+=( "$top_dir/$config_file_local" )
    fi
  fi

  if [[ ${BPAN_CONFIG_EXTRA-} ]] &&
     [[ -f $BPAN_CONFIG_EXTRA ]]
  then
    files+=("$BPAN_CONFIG_EXTRA")
  fi

  ini:init "${files[@]}"
  ini:vars BPAN_ROOT BPAN_SHELL
}

getopt-cmds-spec() {
  source-once "$cmd"
  local help="h,help  Get help for '$app $cmd'"

  if +sys:is-func "$cmd:getopt"; then
    "$cmd:getopt"

  else
    local usage='' options=''
    if +sys:is-func "$cmd:default"; then
      usage+="getopt_default=($("$cmd:default"))"$'\n\n'
    fi
    if +sys:is-func "$cmd:usage"; then
      usage+=$("$cmd:usage")
    else
      usage+="$app [<$app-opts>] $cmd [<$cmd-opts>]"
      if +sys:is-func "$cmd:help"; then
        usage+=$'\n\n'
        usage+="Use '$app help $cmd' for detailed help."
      fi
    fi
    if +sys:is-func "$cmd:options"; then
      options=$("$cmd:options")
    fi
    echo "\
$usage

'$app $cmd' Options:
--
${options+$options$'\n'}
$help
"
  fi
}

set-timers() {
  local regex=$BPAN_DEBUG_TIMER
  [[ $regex == 1 ]] && regex='.'

  local functions=($(
    compgen -A function |
      ( grep -E "$regex" || true ) |
      grep -Ev '^\+'
  ))

  while read -r library; do
    source "$library"
  done < <(find "$BPAN_ROOT"/lib -name '*.bash')

  +source bashplus/timer

  +timer:wrap "${functions[@]}"
}

source-once() {
  local var=_sourced_${1//\//_}
  if [[ -z ${!var-} ]]; then
    source "$root/lib/$1.bash"
    printf -v "$var" 1
  fi
}

bpan-run() (
  opts=()
  $option_quiet && opts+=(--quiet)
  $option_verbose && opts+=(--verbose)
  $option_debug && opts+=(--debug)
  bpan "${opts[@]}" "$@"
)

todo() {
  error "'$app $cmd' not yet implemented\n"
}

[[ $0 != "${BASH_SOURCE[0]}" ]] ||
  main "$@"
