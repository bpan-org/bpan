#!/usr/bin/env bash

( shopt -s compat31 2>/dev/null ) ||
  { echo "bpan requires bash version 3.2 or higher">&2; exit 1; }

[[ ${BPAN_ROOT:-} ]] ||
  { echo "BPAN_ROOT not set. 'source /path/to/bpan/.rc'">&2; exit 1; }

source "$BPAN_ROOT/lib/bpan.bash" --app
bpan:source bashplus
bpan:source config
bpan:source say
bpan:source bpan-util
bpan:source git-utils
bpan:source getopt "\
getopt_default=--help
getopt_cmds_find=true
getopt_cmds_spec=getopt-cmds-spec

$app [<options>] <cmd> [<cmd-opts...>] [<cmd-args>]
$app <cmd> --help

System Commands:
  search        Search for $APP packages
  install       Install a $APP package
  uninstall     Uninstall a $APP package
  list          List all installed $APP packages
  config        Manage $APP config settings
  setup         Setup / configure 'bpan' itself
  complete      Shell tab completion for $app

Project Commands:
  new           Create a new Bash project
  init          Create a '.$app/' project dir
  file          Create or update a project file
  add           Add a package to a Bash project
  update        Update project $APP assets
  test          Run the project tests
  bump          Prepare next version
  register      Register a project with $APP
  publish       Publish the package to $APP
  clean         Remove the build files and dirs

Information Commands:
  help          Get help for a '$app' command
  cmds          List available '$app' commands
  upgrade       Upgrade the $APP installation

Options:
--
v,verbose     Print more output
q,quiet       Print less output

h,help        Show the command summary
V,version     Display $app version
x,debug       Print lots of debugging info
"

main() (
  set-env

  getopt "$@"

  if $option_version; then
    BPAN_VERSION=$(
      config_file=$BPAN_ROOT/.bpan/config \
        config:get bpan.version
    )
    echo "$app $BPAN_VERSION"

  elif [[ $cmd ]]; then
    source-once "$cmd"
    "$cmd:main" "${args[@]}"

  else
    error "Invalid $app command '$app $*'"
  fi
)

set-env() {
  BPAN_PROJECT_ROOT=''
  local dir
  if git:in-repo . &&
     dir=$(git:top-dir) &&
     [[ -f $dir/.bpan/config ]]
  then
    BPAN_PROJECT_ROOT=$dir
  fi

  config_files=( "$BPAN_ROOT/config" )
  [[ $BPAN_PROJECT_ROOT ]] &&
    config_files+=( "$BPAN_PROJECT_ROOT/.bpan/config" )

  root=$BPAN_ROOT
  [[ -f $root/bin/$app ]] ||
    error "BPAN_ROOT variable has bad value '$root'"

  if [[ ${BPAN_INSTALL-} ]]; then
    if [[ $BPAN_INSTALL == $root/local ]]; then
      mkdir -p "$BPAN_INSTALL"
    else
      [[ -d $BPAN_INSTALL ]] ||
        error "BPAN_INSTALL='$BPAN_INSTALL' - directory not found"
    fi
  else
    BPAN_INSTALL=$root/local
    export BPAN_INSTALL
  fi

  BPAN_INDEX_API_VERSION=1

  index_file=$BPAN_INSTALL/index.ini
  index_url=https://raw.githubusercontent.com/bpan-org/bpan-index/main/index.ini
}

source-once() {
  local var=_sourced_$1
  if [[ -z ${!var-} ]]; then
    source "$root/lib/$1.bash"
    printf -v "$var" 1
  fi
}

getopt-cmds-spec() {
  source-once "$cmd"
  local help="h,help  Get help for $cmd command"

  if +is-func "$cmd:getopt"; then
    "$cmd:getopt"

  else
    local usage='' options=''
    if +is-func "$cmd:default"; then
      usage+="getopt_default=($("$cmd:default"))"$'\n\n'
    fi
    if +is-func "$cmd:usage"; then
      usage+=$("$cmd:usage")
    else
      usage+="$app [<$app-opts>] $cmd [<$cmd-opts>]"
    fi
    if +is-func "$cmd:options"; then
      options=$("$cmd:options")
    fi
    echo "\
$usage

'$app $cmd' Options:
--
${options+$options$'\n'}
$help
"
  fi
}

todo() (
  error "'$app $cmd' not yet implemented\n"
)

error() (
  say-r "[$app] Error: $1" >&2
  exit 1
)

main "$@"
