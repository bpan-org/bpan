#!/usr/bin/env bash

VERSION=0.1.54

die() { printf '%s\n' "$@">&2;exit 1;}

( shopt -s compat31 2>/dev/null ) ||
  die "'bpan' requires 'bash' version 3.2 or higher."

[[ ${BPAN_ROOT:-} ]] ||
  die "BPAN_ROOT not set." \
      "Try: 'source /path/to/bpan/.rc'."

source "$BPAN_ROOT/lib/bpan.bash" --app
bpan:source bashplus
bpan:source ini
bpan:source say
bpan:source bpan-util
bpan:source git-utils
bpan:source getopt "\
getopt_default=--help
getopt_cmds_find=true
getopt_cmds_spec=getopt-cmds-spec

$app [<options>] <cmd> [<cmd-opts...>] [<cmd-args>]
$app <cmd> --help

System Commands:
  search        Search for $APP packages
  install       Install a $APP package
  uninstall     Uninstall a $APP package
  list          List all installed $APP packages
  config        Manage $APP config settings

Project Commands:
  new           Create a new $APP project
  init          Add $APP components to a project
  add           Add $APP elements to a project
  update        Update project $APP assets
  test          Run the project tests
  bump          Prepare next version
  publish       Publish the project to $APP index
  register      Register a new $APP package

Information Commands:
  help          Get help for a '$app' command
  cmds          List available '$app' commands
  upgrade       Upgrade the $APP installation

Options:
--
v,verbose     Print more output
q,quiet       Print less output

h,help        Show the command summary
V,version     Display $app version
x,debug       Print lots of debugging info
#
# Hidden options for internal use:
#
setup*        Do .rc system setup
complete*     Shell tab completion for $app
#
# Commands for later:
#
#   info          Get info about a $APP package
#   clean         Remove the build files and dirs
"

main() (
  set-env

  getopt "$@"

  if [[ $option_version == true ]]; then
    echo "$app $VERSION"

  elif $option_setup; then
    source-once setup
    setup:main "${args[@]}"

  elif $option_complete; then
    source-once complete
    complete:main "${args[@]}"

  elif [[ $cmd ]]; then
    source-once "$cmd"
    "$cmd:main" "${args[@]}"

  else
    error "Invalid $app command '$app $*'"
  fi
)

# Determine the bpan config files and the BPAN_INSTALL directory.
set-env() {
  root=$BPAN_ROOT
  [[ -f $root/bin/$app ]] ||
    error "BPAN_ROOT variable has bad value '$root'"

  local files=("$BPAN_ROOT/etc/config")
  local dir

  if [[ -f $BPAN_ROOT/config ]]; then
    files+=("$BPAN_ROOT/config")
  fi

  if git:in-repo . &&
     dir=$(git:top-dir) &&
     [[ -f $dir/.bpan/config ]]
  then
    files+=( "$dir/.bpan/config" )
  fi

  ini:init "${files[@]}"

  export BPAN_INSTALL=${BPAN_INSTALL:-$root/local}
  if [[ ! -d $BPAN_INSTALL ]]; then
    if [[ $BPAN_INSTALL == $root/local ]]; then
      mkdir -p "$BPAN_INSTALL"
    else
      error "BPAN_INSTALL='$BPAN_INSTALL' - directory not found"
    fi
  fi

  BPAN_INDEX_API_VERSION=1

  # TODO add to global config
  bpan_index_repo_url=https://github.com/bpan-org/bpan-index
  bpan_index_repo_dir=src/github/bpan-org/bpan-index
  bpan_index_file=$BPAN_INSTALL/index.ini
  bpan_index_life=5
}

getopt-cmds-spec() {
  source-once "$cmd"
  local help="h,help  Get help for '$app $cmd'"

  if +is-func "$cmd:getopt"; then
    "$cmd:getopt"

  else
    local usage='' options=''
    if +is-func "$cmd:default"; then
      usage+="getopt_default=($("$cmd:default"))"$'\n\n'
    fi
    if +is-func "$cmd:usage"; then
      usage+=$("$cmd:usage")
    else
      usage+="$app [<$app-opts>] $cmd [<$cmd-opts>]"
      if +is-func "$cmd:help"; then
        usage+=$'\n\n'
        usage+="Use '$app help $cmd' for detailed help."
      fi
    fi
    if +is-func "$cmd:options"; then
      options=$("$cmd:options")
    fi
    echo "\
$usage

'$app $cmd' Options:
--
${options+$options$'\n'}
$help
"
  fi
}

source-once() {
  local var=_sourced_$1
  if [[ -z ${!var-} ]]; then
    source "$root/lib/$1.bash"
    printf -v "$var" 1
  fi
}

todo() {
  error "'$app $cmd' not yet implemented\n"
}

error() {
  local line1=${1:-unknown reason}; shift
  die --red --level=1 "[$app] Error: $line1" "$@"
}

main "$@"
